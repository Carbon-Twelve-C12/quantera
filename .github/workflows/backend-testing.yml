name: Backend Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  check:
    name: Check and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check format
        working-directory: ./backend
        run: cargo fmt --all -- --check
      
      - name: Clippy
        working-directory: ./backend
        run: cargo clippy -- -D warnings
      
      - name: Check for vulnerabilities
        working-directory: ./backend
        run: |
          cargo install cargo-audit
          cargo audit

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        working-directory: ./backend
        run: cargo test --all
      
      - name: Generate coverage report
        working-directory: ./backend
        run: |
          cargo install grcov
          rustup component add llvm-tools-preview
          export RUSTFLAGS="-Cinstrument-coverage"
          export LLVM_PROFILE_FILE="target/coverage/coverage-%p-%m.profraw"
          cargo test --all
          grcov target/coverage -s . -t lcov --branch --ignore-not-existing -o target/coverage/lcov.info
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-report
          path: backend/target/coverage/lcov.info

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build release
        working-directory: ./backend
        run: cargo build --release
      
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: backend-binary
          path: backend/target/release/treasury_service

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: quantera_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run integration tests
        working-directory: ./backend
        run: cargo test --all --features integration_tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/quantera_test
          ETHEREUM_RPC_URL: ${{ secrets.ETHEREUM_RPC_URL }} 