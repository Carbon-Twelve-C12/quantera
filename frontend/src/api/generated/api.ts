/* tslint:disable */
/* eslint-disable */
/**
 * Quantera Treasury API
 * API for managing tokenized treasuries, including creation, listing, compliance, and yield information. Treasury creation enforces compliance checks and uses pluggable deployment logic. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateTreasuryRequest
 */
export interface CreateTreasuryRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTreasuryRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTreasuryRequest
     */
    'symbol': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTreasuryRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTreasuryRequest
     */
    'treasury_type': CreateTreasuryRequestTreasuryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateTreasuryRequest
     */
    'total_supply': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTreasuryRequest
     */
    'face_value': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTreasuryRequest
     */
    'yield_rate': number;
    /**
     * 
     * @type {number}
     * @memberof CreateTreasuryRequest
     */
    'maturity_date': number;
}

export const CreateTreasuryRequestTreasuryTypeEnum = {
    Tbill: 'tbill',
    Tnote: 'tnote',
    Tbond: 'tbond'
} as const;

export type CreateTreasuryRequestTreasuryTypeEnum = typeof CreateTreasuryRequestTreasuryTypeEnum[keyof typeof CreateTreasuryRequestTreasuryTypeEnum];

/**
 * 
 * @export
 * @interface TreasuriesIdYieldGet200Response
 */
export interface TreasuriesIdYieldGet200Response {
    /**
     * 
     * @type {string}
     * @memberof TreasuriesIdYieldGet200Response
     */
    'treasury_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof TreasuriesIdYieldGet200Response
     */
    'yield_rate'?: number;
    /**
     * 
     * @type {number}
     * @memberof TreasuriesIdYieldGet200Response
     */
    'annual_yield_percentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof TreasuriesIdYieldGet200Response
     */
    'maturity_date'?: number;
    /**
     * 
     * @type {number}
     * @memberof TreasuriesIdYieldGet200Response
     */
    'issuance_date'?: number;
    /**
     * 
     * @type {number}
     * @memberof TreasuriesIdYieldGet200Response
     */
    'time_to_maturity'?: number;
}
/**
 * 
 * @export
 * @interface TreasuryOverview
 */
export interface TreasuryOverview {
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'token_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'token_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'treasury_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'current_price'?: string;
    /**
     * 
     * @type {number}
     * @memberof TreasuryOverview
     */
    'yield_rate'?: number;
    /**
     * 
     * @type {number}
     * @memberof TreasuryOverview
     */
    'maturity_date'?: number;
    /**
     * 
     * @type {string}
     * @memberof TreasuryOverview
     */
    'status'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all treasuries with optional filters.
         * @summary List treasuries
         * @param {TreasuriesGetTreasuryTypeEnum} [treasuryType] Filter by treasury type
         * @param {number} [minYield] Minimum yield (basis points)
         * @param {number} [maxMaturity] Maximum maturity date (unix timestamp)
         * @param {number} [limit] Page size
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesGet: async (treasuryType?: TreasuriesGetTreasuryTypeEnum, minYield?: number, maxMaturity?: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/treasuries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (treasuryType !== undefined) {
                localVarQueryParameter['treasury_type'] = treasuryType;
            }

            if (minYield !== undefined) {
                localVarQueryParameter['min_yield'] = minYield;
            }

            if (maxMaturity !== undefined) {
                localVarQueryParameter['max_maturity'] = maxMaturity;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a specific treasury by ID.
         * @summary Get treasury details
         * @param {string} id Treasury ID (hex string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('treasuriesIdGet', 'id', id)
            const localVarPath = `/treasuries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get yield information for a specific treasury by ID.
         * @summary Get treasury yield information
         * @param {string} id Treasury ID (hex string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesIdYieldGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('treasuriesIdYieldGet', 'id', id)
            const localVarPath = `/treasuries/{id}/yield`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new treasury token. Requires authentication. Enforces compliance checks (KYC/AML) and uses pluggable deployment logic. Returns the created treasury overview. 
         * @summary Create a new treasury
         * @param {CreateTreasuryRequest} createTreasuryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesPost: async (createTreasuryRequest: CreateTreasuryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTreasuryRequest' is not null or undefined
            assertParamExists('treasuriesPost', 'createTreasuryRequest', createTreasuryRequest)
            const localVarPath = `/treasuries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTreasuryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * List all treasuries with optional filters.
         * @summary List treasuries
         * @param {TreasuriesGetTreasuryTypeEnum} [treasuryType] Filter by treasury type
         * @param {number} [minYield] Minimum yield (basis points)
         * @param {number} [maxMaturity] Maximum maturity date (unix timestamp)
         * @param {number} [limit] Page size
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async treasuriesGet(treasuryType?: TreasuriesGetTreasuryTypeEnum, minYield?: number, maxMaturity?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TreasuryOverview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.treasuriesGet(treasuryType, minYield, maxMaturity, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.treasuriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details for a specific treasury by ID.
         * @summary Get treasury details
         * @param {string} id Treasury ID (hex string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async treasuriesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TreasuryOverview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.treasuriesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.treasuriesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get yield information for a specific treasury by ID.
         * @summary Get treasury yield information
         * @param {string} id Treasury ID (hex string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async treasuriesIdYieldGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TreasuriesIdYieldGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.treasuriesIdYieldGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.treasuriesIdYieldGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new treasury token. Requires authentication. Enforces compliance checks (KYC/AML) and uses pluggable deployment logic. Returns the created treasury overview. 
         * @summary Create a new treasury
         * @param {CreateTreasuryRequest} createTreasuryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async treasuriesPost(createTreasuryRequest: CreateTreasuryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TreasuryOverview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.treasuriesPost(createTreasuryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.treasuriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * List all treasuries with optional filters.
         * @summary List treasuries
         * @param {TreasuriesGetTreasuryTypeEnum} [treasuryType] Filter by treasury type
         * @param {number} [minYield] Minimum yield (basis points)
         * @param {number} [maxMaturity] Maximum maturity date (unix timestamp)
         * @param {number} [limit] Page size
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesGet(treasuryType?: TreasuriesGetTreasuryTypeEnum, minYield?: number, maxMaturity?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TreasuryOverview>> {
            return localVarFp.treasuriesGet(treasuryType, minYield, maxMaturity, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a specific treasury by ID.
         * @summary Get treasury details
         * @param {string} id Treasury ID (hex string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TreasuryOverview> {
            return localVarFp.treasuriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get yield information for a specific treasury by ID.
         * @summary Get treasury yield information
         * @param {string} id Treasury ID (hex string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesIdYieldGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TreasuriesIdYieldGet200Response> {
            return localVarFp.treasuriesIdYieldGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new treasury token. Requires authentication. Enforces compliance checks (KYC/AML) and uses pluggable deployment logic. Returns the created treasury overview. 
         * @summary Create a new treasury
         * @param {CreateTreasuryRequest} createTreasuryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        treasuriesPost(createTreasuryRequest: CreateTreasuryRequest, options?: RawAxiosRequestConfig): AxiosPromise<TreasuryOverview> {
            return localVarFp.treasuriesPost(createTreasuryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * List all treasuries with optional filters.
     * @summary List treasuries
     * @param {TreasuriesGetTreasuryTypeEnum} [treasuryType] Filter by treasury type
     * @param {number} [minYield] Minimum yield (basis points)
     * @param {number} [maxMaturity] Maximum maturity date (unix timestamp)
     * @param {number} [limit] Page size
     * @param {number} [offset] Offset for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public treasuriesGet(treasuryType?: TreasuriesGetTreasuryTypeEnum, minYield?: number, maxMaturity?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).treasuriesGet(treasuryType, minYield, maxMaturity, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a specific treasury by ID.
     * @summary Get treasury details
     * @param {string} id Treasury ID (hex string)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public treasuriesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).treasuriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get yield information for a specific treasury by ID.
     * @summary Get treasury yield information
     * @param {string} id Treasury ID (hex string)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public treasuriesIdYieldGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).treasuriesIdYieldGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new treasury token. Requires authentication. Enforces compliance checks (KYC/AML) and uses pluggable deployment logic. Returns the created treasury overview. 
     * @summary Create a new treasury
     * @param {CreateTreasuryRequest} createTreasuryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public treasuriesPost(createTreasuryRequest: CreateTreasuryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).treasuriesPost(createTreasuryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TreasuriesGetTreasuryTypeEnum = {
    Tbill: 'tbill',
    Tnote: 'tnote',
    Tbond: 'tbond'
} as const;
export type TreasuriesGetTreasuryTypeEnum = typeof TreasuriesGetTreasuryTypeEnum[keyof typeof TreasuriesGetTreasuryTypeEnum];


